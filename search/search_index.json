{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UI5 Tooling","text":"<p>Warning<p>This control is still in beta: It fundamently works, but the APIs are still changing and lot of bugs still be there!</p> </p> <p>A UI5 Module to integrate a Excel Upload for Fiori Element Apps. The module focuses on making integration into existing Fiori element apps as easy as possible, with as little code and configuration as possible.</p> <p>Get Started</p> <p>See all currently supported OData and UI5 Versions here.</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Upload from List Report/Object Page</li> <li>Upload with or without draft</li> <li>Check for mandatory fields</li> <li>Extension Points for uploading to App or sending to backend</li> <li>Multiversion support in Fiori Launchpad (no central deployment necessary anymore)</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code>npm install ui5-cc-excelupload\n</code></pre>"},{"location":"pages/Configuration/","title":"Configuration","text":""},{"location":"pages/Configuration/#options","title":"Options","text":"<p>These options are available:</p> Option Description Details <code>context</code> Context to access App APIs - mandatory object <code>columns</code> Defines which fields should only be taken into account string[] <code>excelFileName</code> Defines the file name when a template is downloaded string <code>tableId</code> ID of table to upload the data to string <code>odataType</code> OData Type of specified table string <code>mandatoryFields</code> The selected fields are checked to see if they are present string[] <code>fieldMatchType</code> Defines what type of strategy is executed when matching excel columns string <code>activateDraft</code> Determines whether a draft should be activated immediately boolean"},{"location":"pages/Configuration/#columns","title":"<code>columns</code>","text":"<p>default: all fields This option defines which fields should only be taken into account during the upload. example: <code>columns: [\"ID\", \"Birthday\",\"FirstName\",\"LastName\"],</code></p>"},{"location":"pages/Configuration/#excelfilename","title":"<code>excelFileName</code>","text":"<p>default: Template.xlsx This option defines the file name when a template is downloaded. If not defined, code checks if Label for OData Type defined.</p>"},{"location":"pages/Configuration/#tableid","title":"<code>tableId</code>","text":"<p>Currently it is checked if exactly one table exists in an Object page. If there is none or more then one, a error is returned. In case of error, the ID of the table can be specified. example: <code>tableId: \"ui5.isu.msb.createmeterread::RunObjectPage--fe::table::_Ableseauftrag::LineItem-innerTable</code></p>"},{"location":"pages/Configuration/#odatatype","title":"<code>odataType</code>","text":"<p>An attempt is currently being made to read the OData type from the table found. In case of error, the OData Type can be specified. example: <code>odataType: com.sap.gateway.srvd.zui_mr_create_run.v0001.AbleseauftragType</code></p>"},{"location":"pages/Configuration/#mandatoryfields","title":"<code>mandatoryFields</code>","text":"<p>The selected fields are checked to see if they are present in Excel. If not defined, they will not be checked. example: <code>mandatoryFields: [\"product_ID\", \"quantity\"]</code></p>"},{"location":"pages/Configuration/#fieldmatchtype","title":"<code>fieldMatchType</code>","text":"<p>default: <code>label</code></p> <p>Options: - <code>label</code> - <code>labelTypeBrackets</code></p> <p>It is possible that the labels of different attributes have the same label. In order to assign the correct labels and types, there is an option to make the type visible in the header. This way a correct assignment can be made.</p> <p>Default (with <code>label</code>) the header columns would like this: <code>ID, Birthday, First Name, Last Name</code> With <code>labelTypeBrackets</code> the header columns would look like this: <code>ID[ID], Birthday[birth_day], First Name[FirstName], Last Name[LastName]</code></p>"},{"location":"pages/Configuration/#activatedraft","title":"<code>activateDraft</code>","text":"<p>default: <code>false</code></p> <p>This option defines in draft scenarios whether a draft should be activated immediately or not. The option only defines whether the attempt should be started. If a draft activation is basically not possible, it will not be executed and may lead to errors. This is useful e.g. in a list report. If this option is set to <code>false</code>, all uploaded units have to be activated manually.</p>"},{"location":"pages/Events/","title":"Events","text":"<p>There are extension points in form of events, where you can intervine to manipulate data.</p>"},{"location":"pages/Events/#check-data-before-upload-to-app","title":"Check Data before Upload to App","text":"<p>As soon as you upload the File to the App, the <code>checkBeforeRead</code> is fired.</p>"},{"location":"pages/Events/#example","title":"Example","text":"<p>This sample is from the sample app. It checks if the price is over 100.  </p> <pre><code>this.excelUpload.attachCheckBeforeRead(function(oEvent) {\n// example\nconst sheetData = oEvent.getParameter(\"sheetData\");\nlet errorArray = [\n{\ntitle: \"Price to high (max 100)\",\ncounter: 0,\n},\n];\nfor (const row of sheetData) {\n//check for invalid date\nif (row.UnitPrice) {\nif(row.UnitPrice &gt; 100){\nerrorArray[0].counter = errorArray[0].counter + 1\n}\n}\n}\noEvent.getSource().addToErrorsResults(errorArray)\n}, this)\n</code></pre>"},{"location":"pages/Events/#manipulate-data-before-it-is-send-to-the-backend","title":"Manipulate Data before it is send to the backend","text":"<p>As you as you press the <code>Upload</code> Button, the <code>changeBeforeCreate</code> is fired.</p>"},{"location":"pages/Events/#example_1","title":"Example","text":"<p>This sample is from the sample app. This is a sample to overwrite the payload.  </p> <pre><code>this.excelUpload.attachChangeBeforeCreate(function (oEvent) {\nlet payload = oEvent.getParameter(\"payload\");\n// round number from 12,56 to 12,6\nif (payload.price) {\npayload.price = Number(payload.price.toFixed(1));\n}\noEvent.getSource().setPayload(payload);\n}, this);\n</code></pre>"},{"location":"pages/GettingStarted/","title":"Getting Started","text":""},{"location":"pages/GettingStarted/#installing-the-ui5-custom-controll","title":"Installing the UI5 Custom Controll","text":""},{"location":"pages/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>Node.js Version 14 or later</li> </ul>"},{"location":"pages/GettingStarted/#general-setup","title":"General Setup","text":"<p>1. Install from npm</p> <pre><code>npm install ui5-cc-excelupload\n</code></pre> <p>2.  Add to your <code>package.json</code>:  This step is not necessary from UI5 Tooling V3</p> <pre><code>\"ui5\": {\n\"dependencies\": [\n// ...\n\"ui5-cc-excelupload\"\n// ...\n]\n}\n</code></pre> <p>3. Add <code>resourceRoots</code> to you <code>manifest.json</code></p> <p>\u26a0\ufe0f You must always keep your ui5-cc-excelUpload version up to date here when updating the module.</p> <pre><code>\"resourceRoots\": {\n\"cc.excelUpload\": \"./thirdparty/customControl/excelUpload/v0/3/5\"\n},\n</code></pre> <p>4. Add <code>--all</code> to your build script in the package.json <pre><code>\"scripts\": {\n// ...\n\"build\": \"ui5 build --config=ui5.yaml --all --clean-dest --dest dist\",\n// ...\n},\n</code></pre></p> <p>Warning<p>There are different implementations for Fiori Elements depending on the OData Version</p> </p>"},{"location":"pages/GettingStarted/#starting-with-fiori-elements","title":"Starting with Fiori Elements","text":"<p>To start the Excel Upload Dialog, you need in your Fiori Elements App a Button. The best way is start with the Guided Development Extension to add a custom action:  </p> <p></p> <p>If you have done that, you can continue with the implementation of your Custom Code either with V2 or V4.</p>"},{"location":"pages/GettingStarted/#starting-with-fiori-elements-odata-v4","title":"Starting with Fiori Elements (OData V4)","text":""},{"location":"pages/GettingStarted/#extension-in-manifestjson","title":"Extension in manifest.json","text":"<p>As a example, here is how you custom action can look like. This example is from the sample app for the object page.</p> <pre><code>\"OrdersObjectPage\": {\n\"type\": \"Component\",\n\"id\": \"OrdersObjectPage\",\n\"name\": \"sap.fe.templates.ObjectPage\",\n\"options\": {\n\"settings\": {\n\"editableHeaderContent\": false,\n\"entitySet\": \"Orders\",\n\"content\": {\n\"header\": {\n\"actions\": {\n\"excelUpload\": {\n\"id\": \"excelUploadButton\",\n\"text\": \"Excel Upload\",\n\"enabled\": \"{ui&gt;/isEditable}\",\n\"press\": \"ui.v4.orders.ext.ObjectPageExtController.openExcelUploadDialog\",\n\"requiresSelection\": false\n}\n}\n}\n}\n}\n}\n},\n</code></pre>"},{"location":"pages/GettingStarted/#custom-code","title":"Custom Code","text":"<pre><code>openExcelUploadDialog: async function (oEvent) {\nthis._view.setBusyIndicatorDelay(0)\nthis._view.setBusy(true)\nif (!this.excelUpload) {\nthis.excelUpload = await sap.ui.getCore().createComponent({\nname: \"cc.excelUpload\",\nasync: false,\ncomponentData: {\ncontext: this\n}\n});\n}\nthis.excelUpload.openExcelUploadDialog()\nthis._view.setBusy(false)\n}\n</code></pre>"},{"location":"pages/GettingStarted/#starting-with-fiori-elements-odata-v2","title":"Starting with Fiori Elements (OData V2)","text":""},{"location":"pages/GettingStarted/#extension-in-manifestjson_1","title":"Extension in manifest.json","text":"<p>As a example, here is how you custom action can look like. This example is from the sample app for the object page.</p> <pre><code>\"extends\": {\n\"extensions\": {\n\"sap.ui.controllerExtensions\": {\n\"sap.suite.ui.generic.template.ObjectPage.view.Details\": {\n\"controllerName\": \"ui.v2.ordersv2.ext.controller.ObjectPageExt\",\n\"sap.ui.generic.app\": {\n\"Orders\": {\n\"EntitySet\": \"Orders\",\n\"Header\": {\n\"Actions\": {\n\"excelUpload\": {\n\"id\": \"excelUploadButton\",\n\"text\": \"Excel Upload\",\n\"applicablePath\": \"ui&gt;/editable\",\n\"press\": \"openExcelUploadDialog\",\n\"requiresSelection\": false\n}\n}\n}\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"pages/GettingStarted/#custom-code_1","title":"Custom Code","text":"<pre><code>openExcelUploadDialog: async function (oEvent) {\nthis.getView().setBusyIndicatorDelay(0)\nthis.getView().setBusy(true)\nif (!this.excelUpload) {\nthis.excelUpload = await sap.ui.getCore().createComponent({\nname: \"cc.excelUpload\",\nasync: false,\ncomponentData: {\ncontext: this\n}\n});\n}\nthis.excelUpload.openExcelUploadDialog()\nthis.getView().setBusy(false)\n}\n</code></pre>"},{"location":"pages/SupportVersions/","title":"Supported Versions","text":"<p>The goal is to support as many environments and UI5 versions as possible. Currently we aim for all Long-term versions that are in maintenance.</p> <p>Here is an overview of which apps have already been created and passed the first smoke tests. Another overview shows which apps are already tested automatically with wdi5 and are therefore constantly tested for their functionality.</p>"},{"location":"pages/SupportVersions/#apps","title":"Apps","text":""},{"location":"pages/SupportVersions/#cap-v2","title":"CAP V2","text":"UI5 Version List Report Draft List Report Non Draft Object Page Draft Object Page Non Draft Freestyle 1.108 1.96 1.84 1.71"},{"location":"pages/SupportVersions/#cap-v4","title":"CAP V4","text":"UI5 Version List Report Draft Object Page Draft Freestyle Flexible Programming Model 1.108 1.96 1.84 1.71"},{"location":"pages/SupportVersions/#wdi5-tests","title":"wdi5 Tests","text":""},{"location":"pages/SupportVersions/#cap-v2_1","title":"CAP V2","text":"UI5 Version List Report Draft List Report Non Draft Object Page Draft Object Page Non Draft Freestyle 1.108 1.96 1.84 1.71"},{"location":"pages/SupportVersions/#cap-v4_1","title":"CAP V4","text":"UI5 Version List Report Draft Object Page Draft Freestyle Flexible Programming Model 1.108 1.96 1.84 1.71"}]}